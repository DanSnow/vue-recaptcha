[{"id":"content:0.index.md","path":"/","dir":"","title":"vue-recaptcha document","description":"","keywords":[],"body":"    vue-recaptcha   Make Google's reCAPTCHA easy to use in Vue.js/Nuxt.js            <  template  >\n       <  Checkbox   />\n     </  template  >    What's included      reCAPTCHA v2   The \"I'm not a robot\" checkbox    reCAPTCHA v3   Determinate if user is human without interrupt the user flow    Nuxt integration   Use reCAPTCHA in Nuxt.js  .dark .ct-935781{color:#C9D1D9;}\n.ct-935781{color:#24292F;}\n.dark .ct-238295{color:#7EE787;}\n.ct-238295{color:#116329;}\n.dark .ct-081784{color:#FFA198;font-style:italic;}\n.ct-081784{color:#82071E;font-style:italic;}"},{"id":"content:1.guide:0.index.md","path":"/guide","dir":"","title":"Get started","description":"","keywords":["Installation","Setup vue-recaptcha plugin","Provide reCAPTCHA script","Usage without unhead"],"body":"  Get started   From vue-recaptcha v2? v3 is a complete rewrite, please check out   migration guide  Let's get started with vue-recaptcha.  What is vue-recaptcha  vue-recaptcha is just a wrapper to provide an easier interface for   Google's reCAPTCHA    component that is easy to use  composable to integrate into your own app  vue-recaptcha is not for:    customize reCAPTCHA UI  provide features that is not implemented by Google reCATPCHA, like change language on the fly  Installation         Setup vue-recaptcha plugin   By default, vue-recaptcha use   @unhead/vue  to inject the reCAPTCHA script, if you are not using   @unhead/vue  or   @vueuse/head , please check out   Usage without unhead      import   { VueRecaptchaPlugin }   from     'vue-recaptcha'\n   \n   const     app     =     createApp  (App)\n   app.  use  (VueRecaptchaPlugin, {\n     v2SiteKey:   'YOUR_V2_SITEKEY_HERE'  ,\n     v3SiteKey:   'YOUR_V3_SITEKEY_HERE'  ,\n   })  Please replace   YOUR_V2_SITEKEY_HERE  and   YOUR_V3_SITEKEY_HERE  with your keys. If you don't have one, please go to   here  and apply one  Not both of the sitekey is required, if you only need reCAPTCHA v2, just provide the   v2SiteKey  In this document, if you see   v2  which means you'll need to pass   v2SiteKey  and   v3  means you'll need   v3SiteKey  If you did't provide the corresponding site key, you'll get a runtime error  Provide reCAPTCHA script  To load the reCAPTCHA script, you will need to call   useRecaptchaProvider  in your   app.vue      <  script     setup     lang  =  \"ts\"  >\n   import   { useRecaptchaProvider }   from     'vue-recaptcha'\n   \n   useRecaptchaProvider  ()\n   </  script  >\n   \n   <  template  >\n     <  div     id  =  \"app\"  >\n       <  router-view   />\n     </  div  >\n   </  template  >  That's all, now you can start using vue-recaptcha. Please see   components  for quick introduce for all of the components  Go to component overview  Usage without unhead  If you are not using   @unhead/vue  or   @vueuse/head , you can simply import the plugin from   vue-recaptcha/head      import   { VueRecaptchaPlugin }   from     'vue-recaptcha/head'\n   \n   const     app     =     createApp  (App)\n   app.  use  (VueRecaptchaPlugin, {\n     v2SiteKey:   'YOUR_V2_SITEKEY_HERE'  ,\n     v3SiteKey:   'YOUR_V3_SITEKEY_HERE'  ,\n   })  With this version, it will inject the reCAPTCHA script by simply creating a   script  tag in document   head  .dark .ct-942366{color:#FF7B72;}\n.ct-942366{color:#CF222E;}\n.dark .ct-935781{color:#C9D1D9;}\n.ct-935781{color:#24292F;}\n.dark .ct-667011{color:#A5D6FF;}\n.ct-667011{color:#0A3069;}\n.dark .ct-998471{color:#79C0FF;}\n.ct-998471{color:#0550AE;}\n.dark .ct-923966{color:#D2A8FF;}\n.ct-923966{color:#8250DF;}\n.dark .ct-238295{color:#7EE787;}\n.ct-238295{color:#116329;}"},{"id":"content:1.guide:1.nuxt.md","path":"/guide/nuxt","dir":"guide","title":"Nuxt","description":"","keywords":["Options","Enterprise","Manually Install Plugin"],"body":"  Nuxt   When using vue-recaptcha in Nuxt, please try to utilize Nuxt's auto import feature as much as possible to avoid potential bugs.  vue-recaptcha supports Nuxt.js out of the box.      defineNuxtConfig  ({\n     modules: [  'vue-recaptcha/nuxt'  ],\n   })   Please noticed that to prevent from conflict with your components, vue-recaptcha's Nuxt integration has renaming the following components      Original name   Renamed to     Checkbox   RecaptchaCheckbox    ChallengeV2   RecaptchaChallengeV2    ChallengeV3   RecaptchaChallengeV3  Options  You can pass options to the module by adding a   recaptcha  key to your   nuxt.config.js  file in   runtimeConfig.public .      defineNuxtConfig  ({\n     modules: [  'vue-recaptcha/nuxt'  ],\n     runtimeConfig: {\n       public: {\n         recaptcha: {\n           v2SiteKey:   'YOUR_V2_SITEKEY_HERE'  ,\n           v3SiteKey:   'YOUR_V3_SITEKEY_HERE'  ,\n         },\n       },\n     },\n   })  Enterprise  If you are using reCAPTCHA Enterprise, you can use the   recaptcha  key in   nuxt.config  to enable the enterprise version support.   Enterprise version support is experimental and may be changed in the future.      defineNuxtConfig  ({\n     modules: [  'vue-recaptcha/nuxt'  ],\n     runtimeConfig: {\n       public: {\n         recaptcha: {\n           v2SiteKey:   'YOUR_V2_SITEKEY_HERE'  ,\n           v3SiteKey:   'YOUR_V3_SITEKEY_HERE'  ,\n         },\n       },\n     },\n     recaptcha: {\n       enterprise:   true  ,\n     },\n   })  Manually Install Plugin  If you want to take full control of the plugin, you can manually install the plugin by adding the following code to your   nuxt.config.js  file.      defineNuxtConfig  ({\n     modules: [  'vue-recaptcha/nuxt'  ],\n     runtimeConfig: {\n       public: {\n         recaptcha: {\n           v2SiteKey:   'YOUR_V2_SITEKEY_HERE'  ,\n           v3SiteKey:   'YOUR_V3_SITEKEY_HERE'  ,\n         },\n       },\n     },\n     recaptcha: {\n       plugin:   false  ,\n     },\n   })  Then you will need to manually set up the plugin by creating a file named   recaptcha.ts  in your   plugins  directory.      import   VueRecaptchaPlugin   from     'vue-recaptcha'\n   \n   export     default     defineNuxtPlugin  (({ vueApp })   =>     {\n       const   {\n         public  : {   recaptcha   },\n     }   =     useRuntimeConfig  ()\n     vueApp.  use  (VueRecaptchaPlugin, recaptcha)\n   }  )  .dark .ct-923966{color:#D2A8FF;}\n.ct-923966{color:#8250DF;}\n.dark .ct-935781{color:#C9D1D9;}\n.ct-935781{color:#24292F;}\n.dark .ct-667011{color:#A5D6FF;}\n.ct-667011{color:#0A3069;}\n.dark .ct-998471{color:#79C0FF;}\n.ct-998471{color:#0550AE;}\n.dark .ct-942366{color:#FF7B72;}\n.ct-942366{color:#CF222E;}\n.dark .ct-443230{color:#FFA657;}\n.ct-443230{color:#953800;}"},{"id":"content:1.guide:2.migration.md","path":"/guide/migration","dir":"guide","title":"Migration from v2","description":"","keywords":["1. set up the plugin","2. Provide reCAPTCHA script","3. Use the components"],"body":"  Migration from v2  1. set up the plugin  V3 need you to set up a Vue plugin before start using.      import   { VueRecaptchaPlugin }   from     'vue-recaptcha'\n   \n   const     app     =     createApp  (App)\n   app.  use  (VueRecaptchaPlugin, {\n     v2SiteKey:   'YOUR_SITE_KEY_HERE'\n   })  2. Provide reCAPTCHA script  To load the reCAPTCHA script, you will need to call   useRecaptchaProvider  in your   app.vue      <  script     setup     lang  =  \"ts\"  >\n   import   { useRecaptchaProvider }   from     'vue-recaptcha'\n   \n   useRecaptchaProvider  ()\n   </  script  >  3. Use the components  Now you can start using the components  If you are using the \"I'm not a robot\" checkbox, please use the   <Checkbox />      <  template  >\n     <  Checkbox     v-model  =  \"response\"   />\n   </  template  >  You can read more at   here  If you are using the invisible reCAPTCHA, please use the   <ChallengeV2 />      <  template  >\n     <  ChallengeV2     v-model  =  \"response\"  >\n       <  button  >submit</  button  >\n     </  ChallengeV2  >\n   </  template  >  You can read more at   here  .dark .ct-942366{color:#FF7B72;}\n.ct-942366{color:#CF222E;}\n.dark .ct-935781{color:#C9D1D9;}\n.ct-935781{color:#24292F;}\n.dark .ct-667011{color:#A5D6FF;}\n.ct-667011{color:#0A3069;}\n.dark .ct-998471{color:#79C0FF;}\n.ct-998471{color:#0550AE;}\n.dark .ct-923966{color:#D2A8FF;}\n.ct-923966{color:#8250DF;}\n.dark .ct-238295{color:#7EE787;}\n.ct-238295{color:#116329;}\n.dark .ct-081784{color:#FFA198;font-style:italic;}\n.ct-081784{color:#82071E;font-style:italic;}"},{"id":"content:1.guide:3.enterprise.md","path":"/guide/enterprise","dir":"guide","title":"Enterprise reCAPTCHA Support","description":"","keywords":["Usage without unhead","Nuxt"],"body":"  Enterprise reCAPTCHA Support   Enterprise version support is experimental and may be changed in the future.  Simply change your plugin import to the following:      import   VueRecaptchaPlugin   from     'vue-recaptcha/enterprise'\n   \n   const     app     =     createApp  (App)\n   app.  use  (VueRecaptchaPlugin)  Usage without unhead  If you are not using   unhead  and want to use the enterprise version, you can use the following code:      import   VueRecaptchaPlugin   from     'vue-recaptcha/enterprise-head'\n   \n   const     app     =     createApp  (App)\n   app.  use  (VueRecaptchaPlugin)  Nuxt  If you are using Nuxt, you can set the   recaptcha.enterprise  option to   true :      defineNuxtConfig  ({\n     modules: [  'vue-recaptcha/nuxt'  ],\n     runtimeConfig: {\n       public: {\n         recaptcha: {\n           v2SiteKey:   'YOUR_V2_SITEKEY_HERE'  ,\n           v3SiteKey:   'YOUR_V3_SITEKEY_HERE'  ,\n         },\n       },\n     },\n     recaptcha: {\n       enterprise:   true  ,\n     },\n   })  .dark .ct-942366{color:#FF7B72;}\n.ct-942366{color:#CF222E;}\n.dark .ct-935781{color:#C9D1D9;}\n.ct-935781{color:#24292F;}\n.dark .ct-667011{color:#A5D6FF;}\n.ct-667011{color:#0A3069;}\n.dark .ct-998471{color:#79C0FF;}\n.ct-998471{color:#0550AE;}\n.dark .ct-923966{color:#D2A8FF;}\n.ct-923966{color:#8250DF;}"},{"id":"content:2.components:0.index.md","path":"/components","dir":"","title":"Overview","description":"","keywords":["Checkbox v2","ChallengeV2 v2","ChallengeV3 v3"],"body":"  Overview   Checkbox    v2  The most basic form of the reCAPTCHA         <  template  >\n     <  Checkbox   />\n   </  template  >  Go to document   ChallengeV2    v2  Invisible reCAPTCHA.  Go to document   ChallengeV3    v3  reCAPTCHA v3  Go to document  .dark .ct-935781{color:#C9D1D9;}\n.ct-935781{color:#24292F;}\n.dark .ct-238295{color:#7EE787;}\n.ct-238295{color:#116329;}\n.dark .ct-081784{color:#FFA198;font-style:italic;}\n.ct-081784{color:#82071E;font-style:italic;}"},{"id":"content:2.components:1.checkbox.md","path":"/components/checkbox","dir":"components","title":"Checkbox","description":"Insert reCAPTCHA v2 checkbox","keywords":["Props","v-model"],"body":"  Checkbox   v2  Insert reCAPTCHA v2 checkbox           <  script     setup     lang  =  \"ts\"  >\n       const     theme     =     ref  <  'light'     |     'dark'  >(  'light'  )\n       const     response     =     ref  ()\n     </  script  >\n   \n     <  template  >\n       <  div  >\n         <  ThemeButton     v-model  =  \"theme\"     @click  =  \"response = ''\"   />\n         <  div  >{{ response ? 'Verified' : 'Please click the checkbox' }}</  div  >\n         <  Checkbox     :key  =  \"theme\"     v-model  =  \"response\"     :theme  =  \"theme\"   />\n       </  div  >\n     </  template  >  Props      key   type   default   description     as  string   'div'  What element to render    theme   'light' | 'dark'   'light'  Theme for reCAPTCHA checkbox    size   'normal' | 'compact'   'normal'  Size for the reCAPTCHA checkbox   v-model      key   type   description     modelValue  string  The reCAPTCHA response    widgetId  string  Widget id for reCAPTCHA checkbox  About   modelValue  You can set   modelValue  to   null  or empty string to reset reCAPTCHA checkbox.  .dark .ct-935781{color:#C9D1D9;}\n.ct-935781{color:#24292F;}\n.dark .ct-238295{color:#7EE787;}\n.ct-238295{color:#116329;}\n.dark .ct-998471{color:#79C0FF;}\n.ct-998471{color:#0550AE;}\n.dark .ct-667011{color:#A5D6FF;}\n.ct-667011{color:#0A3069;}\n.dark .ct-942366{color:#FF7B72;}\n.ct-942366{color:#CF222E;}\n.dark .ct-923966{color:#D2A8FF;}\n.ct-923966{color:#8250DF;}\n.dark .ct-081784{color:#FFA198;font-style:italic;}\n.ct-081784{color:#82071E;font-style:italic;}"},{"id":"content:2.components:2.challenge-v2.md","path":"/components/challenge-v2","dir":"components","title":"ChallengeV2","description":"Create invisible reCAPTCHA v2","keywords":["Props","v-model","Slots"],"body":"  ChallengeV2   v2  Create invisible reCAPTCHA v2           <  script     setup     lang  =  \"ts\"  >\n       import   { RecaptchaV2State }   from     '#recaptcha'\n   \n       const     map     =   {\n       [RecaptchaV2State.Init]:   'Click to Challenge'  ,\n       [RecaptchaV2State.Verified]:   'Verified'  ,\n       [RecaptchaV2State.Expired]:   'Expired'  ,\n       [RecaptchaV2State.Error]:   'Error'  ,\n     }\n   \n       const     response     =     ref  ()\n     </  script  >\n   \n     <  template  >\n       <  ChallengeV2     v-slot  =  \"{ state }\"     v-model  =  \"response\"  >\n         <  PrimaryButton  >{{ map[state] }}{{ response ? ` ${response.slice(0, 6)}...` : '' }}</  PrimaryButton  >\n       </  ChallengeV2  >\n     </  template  >  Props      key   type   default   description     as  string   'div'  What element to render    badge  `'bottomright'  'bottomleft'  'inline'`    autoExecute  boolean   true  Should vue-recaptcha execute challenge on click, if you set it to   false  you'll need  to call the   execute  method in the slot   v-model      key   type   description     modelValue  string  The reCAPTCHA response    widgetId  string  Widget id for reCAPTCHA checkbox  About   modelValue  You can set   modelValue  to   null  or empty string to reset reCAPTCHA checkbox.  Slots  default  This is the position that usually place a your submit button. When click on the content,   ChallengeV2  will automatically execute the reCAPTCHA challenge by default  Slot API      interface     SlotApi   {\n       /**\n      * widget id\n      */\n       widgetId  :     WidgetID     |     undefined\n       /**\n      * reCAPTCHA state\n      */\n       state  :     RecaptchaV2State\n   \n       isError  :     boolean\n       isExpired  :     boolean\n       isVerified  :     boolean\n   \n       /**\n      * reset reCAPTCHA\n      */\n       reset  :   ()   =>     void\n       /**\n      * execute challenge\n      */\n       execute  :   ()   =>     void\n   }   RecaptchaV2State      export     enum     RecaptchaV2State   {\n       Init     =     'init'  ,\n       Verified     =     'verified'  ,\n       Expired     =     'expired'  ,\n       Error     =     'error'  ,\n   }   flowchart TD\nInit -->|Challenge| Verified\nInit -->|Challenge| Error\nVerified -->|Challenge expired| Expired\nError -->|Reset| Init\nVerified -->|Reset| Init\nExpired -->|Reset| Init  .dark .ct-935781{color:#C9D1D9;}\n.ct-935781{color:#24292F;}\n.dark .ct-238295{color:#7EE787;}\n.ct-238295{color:#116329;}\n.dark .ct-998471{color:#79C0FF;}\n.ct-998471{color:#0550AE;}\n.dark .ct-667011{color:#A5D6FF;}\n.ct-667011{color:#0A3069;}\n.dark .ct-942366{color:#FF7B72;}\n.ct-942366{color:#CF222E;}\n.dark .ct-923966{color:#D2A8FF;}\n.ct-923966{color:#8250DF;}\n.dark .ct-081784{color:#FFA198;font-style:italic;}\n.ct-081784{color:#82071E;font-style:italic;}\n.dark .ct-443230{color:#FFA657;}\n.ct-443230{color:#953800;}\n.dark .ct-128513{color:#8B949E;}\n.ct-128513{color:#6E7781;}"},{"id":"content:2.components:3.challenge-v3.md","path":"/components/challenge-v3","dir":"components","title":"ChallengeV3","description":"Create reCAPTCHA v3 challenge","keywords":["Props","v-model","Slots"],"body":"  ChallengeV3   v3  Create reCAPTCHA v3 challenge           <  script     lang  =  \"ts\"     setup  >\n       const     response     =     ref  ()\n     </  script  >\n   \n     <  template  >\n       <  div  >\n         <  ChallengeV3     v-model  =  \"response\"     action  =  \"submit\"  >\n           <  PrimaryButton  >{{ response ? `Get response: ${response.slice(0, 6)}...` : 'click me' }}</  PrimaryButton  >\n         </  ChallengeV3  >\n       </  div  >\n     </  template  >  Props      key   type   default   description     action  string   The   action  for reCAPTCHA v3    as  string   'div'  What element to render    autoExecute  boolean   true  Should vue-recaptcha execute challenge on click, if you set it to   false  you'll need  to call the   execute  method in the slot   v-model      key   type   description     modelValue  string  The reCAPTCHA response  Slots  default  This is the position that usually place a your submit button. When click on the content,   ChallengeV3  will automatically execute the reCAPTCHA challenge by default  Slot API      interface     SlotApi   {\n       /**\n      * reCAPTCHA v3 response\n      */\n       response  :     string     |     undefined\n       /**\n      * execute reCAPTCHA v3 challenge\n      */\n       execute  :   ()   =>     Promise  <  string  >\n   }  .dark .ct-935781{color:#C9D1D9;}\n.ct-935781{color:#24292F;}\n.dark .ct-238295{color:#7EE787;}\n.ct-238295{color:#116329;}\n.dark .ct-998471{color:#79C0FF;}\n.ct-998471{color:#0550AE;}\n.dark .ct-667011{color:#A5D6FF;}\n.ct-667011{color:#0A3069;}\n.dark .ct-942366{color:#FF7B72;}\n.ct-942366{color:#CF222E;}\n.dark .ct-923966{color:#D2A8FF;}\n.ct-923966{color:#8250DF;}\n.dark .ct-081784{color:#FFA198;font-style:italic;}\n.ct-081784{color:#82071E;font-style:italic;}\n.dark .ct-443230{color:#FFA657;}\n.ct-443230{color:#953800;}\n.dark .ct-128513{color:#8B949E;}\n.ct-128513{color:#6E7781;}"},{"id":"content:3.composables:0.recaptcha-provider.md","path":"/composables/recaptcha-provider","dir":"composables","title":"useRecaptchaProvider","description":"The function that setup the required scripts for reCAPTCHA. It must be called in your app, or vue-recaptcha won't work.","keywords":[],"body":"  useRecaptchaProvider  The function that setup the required scripts for reCAPTCHA. It must be called in your app, or vue-recaptcha won't work.      <  script     setup     lang  =  \"ts\"  >\n   import   { useRecaptchaProvider }   from     'vue-recaptcha'\n   \n   useRecaptchaProvider  ()\n   </  script  >  .dark .ct-935781{color:#C9D1D9;}\n.ct-935781{color:#24292F;}\n.dark .ct-238295{color:#7EE787;}\n.ct-238295{color:#116329;}\n.dark .ct-998471{color:#79C0FF;}\n.ct-998471{color:#0550AE;}\n.dark .ct-667011{color:#A5D6FF;}\n.ct-667011{color:#0A3069;}\n.dark .ct-942366{color:#FF7B72;}\n.ct-942366{color:#CF222E;}\n.dark .ct-923966{color:#D2A8FF;}\n.ct-923966{color:#8250DF;}"},{"id":"content:3.composables:1.challenge-v2.md","path":"/composables/challenge-v2","dir":"composables","title":"useChallengeV2","description":"","keywords":["Description","Input","Return","Examples"],"body":"  useChallengeV2   v2  Description  A composable to help you mount the reCAPTCHA checkbox or invisible reCAPTCHA  Input      interface     RecaptchaV2CheckboxOptionsInput   {\n       theme  ?:     'dark'     |     'light'\n       size  ?:     'compact'     |     'normal'\n       tabindex  ?:     string\n   }\n   \n   interface     RecaptchaV2InvisibleOptionsInput   {\n       badge  ?:     'bottomright'     |     'bottomleft'     |     'inline'\n       size  :     'invisible'\n       tabindex  ?:     string\n   }\n   \n   export     interface     UseChallengeV2Input   {\n       /**\n      * root to mount reCAPTCHA\n      */\n       root  ?:     MaybeComputedRef  <  Element     |     undefined  >\n       /**\n      * Option that pass to reCAPTCHA render\n      */\n       options  ?:     RecaptchaV2OptionsInput\n   }  Return      export     interface     UseChallengeV2Return   {\n       /**\n      * root element ref to mount reCAPTCHA\n      */\n       root  :     Ref  <  Element     |     undefined  >\n       /**\n      * reCAPTCHA widget id\n      */\n       widgetID  :     Ref  <  WidgetID     |     undefined  >\n   \n       /**\n      * state of reCAPTCHA\n      */\n       state  :     Ref  <  RecaptchaV2State  >\n   \n       /**\n      * the verified event\n      */\n       onVerify  :     EventHookOn  <  string  >\n       /**\n      * the expired event\n      */\n       onExpired  :     EventHookOn  <  void  >\n       /**\n      * the error event\n      */\n       onError  :     EventHookOn  <  Error  >\n   \n       /**\n      * execute the challenge\n      */\n       execute  :   ()   =>     void\n       /**\n      * reset reCAPTCHA\n      */\n       reset  :   ()   =>     void\n   }  About the   state  please see   here  for more details  Please see   reCAPTCHA docs  for more information about the options.  Examples  Checkbox      <  script  >\n   import   { useChallengeV2 }   from     'vue-recaptcha'\n   \n   const   {   root  ,   onVerify   }   =     useChallengeV2  ({\n     options: {\n       theme:   'light'  ,\n       size:   'normal'  ,\n     }\n   })\n   \n   onVerify  ((  response  )   =>   {\n       // do something with response\n     console.  log  (response)\n   })\n   </  script  >\n   \n   <  template  >\n     <  div     ref  =  \"root\"     /  >\n   </  template  >  Invisible reCAPTCHA      <  script  >\n   import   { useChallengeV2 }   from     'vue-recaptcha'\n   \n   const   {   root  ,   execute  ,   onVerify   }   =     useChallengeV2  ({\n     options: {\n         // It's important to pass `size: 'invisible'` to render a invisible reCAPTCHA\n       size:   'invisible'  ,\n     }\n   })\n   \n   onVerify  ((  response  )   =>   {\n       // do something with response\n     console.  log  (response)\n   })\n   </  script  >\n   \n   <  template  >\n     <  div  >\n       <  button     @click  =  \"execute\"  >submit</  button  >\n         <!-- You must give an empty div to render the invisible reCAPTCHA -->\n       <  div     ref  =  \"root\"     /  >\n     </  div  >\n   </  template  >  .dark .ct-942366{color:#FF7B72;}\n.ct-942366{color:#CF222E;}\n.dark .ct-935781{color:#C9D1D9;}\n.ct-935781{color:#24292F;}\n.dark .ct-443230{color:#FFA657;}\n.ct-443230{color:#953800;}\n.dark .ct-667011{color:#A5D6FF;}\n.ct-667011{color:#0A3069;}\n.dark .ct-998471{color:#79C0FF;}\n.ct-998471{color:#0550AE;}\n.dark .ct-128513{color:#8B949E;}\n.ct-128513{color:#6E7781;}\n.dark .ct-923966{color:#D2A8FF;}\n.ct-923966{color:#8250DF;}\n.dark .ct-238295{color:#7EE787;}\n.ct-238295{color:#116329;}\n.dark .ct-081784{color:#FFA198;font-style:italic;}\n.ct-081784{color:#82071E;font-style:italic;}"},{"id":"content:3.composables:2.challenge-v3.md","path":"/composables/challenge-v3","dir":"composables","title":"useChallengeV3","description":"","keywords":["Description","Input","Return","Usage"],"body":"  useChallengeV3   v3  Description  A composable to help you execute the reCAPTCHA v3 challenge  Input    action : The action for reCAPTCHA v3  Return      export     interface     UseChallengeV3Return   {\n       /**\n      * reCAPTCHA v3 response as ref\n      */\n       response  :     Ref  <  string     |     undefined  >\n       /**\n      * Execute the challenge\n      *   @returns   response for reCAPTCHA v3\n      */\n       execute  :   ()   =>     Promise  <  string  >\n   }  Usage      <  script     lang  =  \"ts\"     setup  >\n   import   { useChallengeV3 }   from     'vue-recaptcha'\n   \n   const   {   execute   }   =     useChallengeV3  (  'submit'  )\n   \n   async     function     onSubmit   () {\n       const     response     =     await     execute  ()\n   \n       // do something with response\n     console.  log  (response)\n   }\n   </  script  >\n   \n   <  template  >\n     <  div  >\n       <  button     @click  =  \"onSubmit\"  >submit</  button  >\n     </  div  >\n   </  template  >  .dark .ct-942366{color:#FF7B72;}\n.ct-942366{color:#CF222E;}\n.dark .ct-935781{color:#C9D1D9;}\n.ct-935781{color:#24292F;}\n.dark .ct-443230{color:#FFA657;}\n.ct-443230{color:#953800;}\n.dark .ct-128513{color:#8B949E;}\n.ct-128513{color:#6E7781;}\n.dark .ct-998471{color:#79C0FF;}\n.ct-998471{color:#0550AE;}\n.dark .ct-923966{color:#D2A8FF;}\n.ct-923966{color:#8250DF;}\n.dark .ct-238295{color:#7EE787;}\n.ct-238295{color:#116329;}\n.dark .ct-667011{color:#A5D6FF;}\n.ct-667011{color:#0A3069;}"},{"id":"content:4.advanced:0.customize-recaptcha-script-loading.md","path":"/advanced/customize-recaptcha-script-loading","dir":"advanced","title":"Customize reCAPTCHA script loading","description":"By default vue-recaptcha will use unhead to load the reCAPTCHA script.","keywords":["The defineScriptLoader function and ScriptLoaderOptions"],"body":"  Customize reCAPTCHA script loading  By default vue-recaptcha will use   unhead  to load the reCAPTCHA script.  If you need to completely control how to load the reCAPTCHA script. You can use   createPlugin  to create a plugin with your own   loadScript  function.      import   { onMounted }   from     'vue'\n   import   { defineScriptLoader, toQueryString }   from     'vue-recaptcha'\n   \n   // Define your own loadScript function\n   const     loadScript     =     defineScriptLoader  ((  options  )   =>   {\n       // This function will be called by useRecaptchaProvider\n       return   ()   =>   {\n         onMounted  (()   =>   {\n           // You can use any way to load the reCAPTCHA script\n           const     script     =   document.  createElement  (  'script'  )\n         script.src   =     `${  options  .  recaptchaApiURL  }?${  toQueryString  (  options  .  params  )  }`\n         script.async   =     true\n         script.defer   =     true\n           if   (options.nonce) {\n           script.nonce   =   options.nonce\n         }\n         document.head.  append  (script)\n       })\n     }\n   })\n   \n   const     plugin     =     createPlugin  (loadScript)  The   defineScriptLoader  function and   ScriptLoaderOptions      export     interface     RecaptchaParams   {\n       // You must pass these two value as query string to reCAPTCHA\n       render  :     LiteralUnion  <  'explicit'  ,   string  >\n       onload  :     string\n   \n       // Below you can customize as you want\n       hl  ?:     string     |     undefined\n       trustedtypes  ?:     'true'     |     undefined\n     [  k  :     string  ]  :     string     |     undefined\n   }\n   \n   export     interface     ScriptLoaderOptions   {\n       /**\n      * you can use recaptcha.net instead of google.com, if you set recaptchaApiURL, this option will be ignored\n      */\n       useRecaptchaNet  ?:     boolean\n       /**\n      * you can use your own recaptcha api url, if you set this option, useRecaptchaNet will be ignored\n      */\n       recaptchaApiURL  :     string\n       /**\n      * nonce for script tag\n      */\n       nonce  ?:     string\n       /**\n      * params for recaptcha api\n      */\n       params  :     RecaptchaParams\n   }\n   \n   /**\n    *  Helper function for define your own loadScript function\n    */\n   function     defineScriptLoader  (  fn  :     ScriptLoaderFactory  )  :     NormalizedScriptLoaderFactory  .dark .ct-942366{color:#FF7B72;}\n.ct-942366{color:#CF222E;}\n.dark .ct-935781{color:#C9D1D9;}\n.ct-935781{color:#24292F;}\n.dark .ct-667011{color:#A5D6FF;}\n.ct-667011{color:#0A3069;}\n.dark .ct-128513{color:#8B949E;}\n.ct-128513{color:#6E7781;}\n.dark .ct-998471{color:#79C0FF;}\n.ct-998471{color:#0550AE;}\n.dark .ct-923966{color:#D2A8FF;}\n.ct-923966{color:#8250DF;}\n.dark .ct-443230{color:#FFA657;}\n.ct-443230{color:#953800;}"},{"id":"content:5.integration:0.vee-validation.md","path":"/integration/vee-validation","dir":"integration","title":"Vee Validation","description":"Vee Validate is a plugin for form validation.","keywords":["Confirm user has clicked the checkbox before submit","Execute challenge when user submit form"],"body":"  Vee Validation   Vee Validate  is a plugin for form validation.  Confirm user has clicked the checkbox before submit         <  script     setup     lang  =  \"ts\"  >\n   import   { useField, useForm }   from     'vee-validate'\n   import     *     as   yup   from     'yup'\n   \n   const   {   handleSubmit   }   =     useForm  ({\n     validationSchema: yup.  object  ({\n       name: yup.  string  ().  required  (),\n       recaptcha: yup.  string  ().  required  (  'Please verify you are human'  ),\n     }),\n   })\n   \n   const   {   value  :   nameValue  ,   errorMessage  :   nameError   }   =     useField  (  'name'  )\n   const   {   value  :   recaptchaValue  ,   errorMessage  :   recaptchaError   }   =     useField  <  string  >(  'recaptcha'  )\n   \n   const     onSubmit     =     handleSubmit  ((  values  )   =>   {\n     console.  log  (values)\n   })\n   </  script  >\n   \n   <  template  >\n     <  form     class  =  \"flex flex-col gap-2\"     @submit  =  \"onSubmit\"  >\n       <  div  >\n         <  input     v-model  =  \"nameValue\"     class  =  \"border border-blue p-1\"     type  =  \"text\"     placeholder  =  \"Your name\"   />\n         <  div     v-if  =  \"nameError\"     class  =  \"text-red\"  >{{ nameError }}</  div  >\n       </  div  >\n       <  div  >\n         <  RecaptchaCheckbox     v-model  =  \"recaptchaValue\"   />\n         <  div     v-if  =  \"recaptchaError\"     class  =  \"text-red\"  >{{ recaptchaError }}</  div  >\n       </  div  >\n       <  div  >\n         <  PrimaryButton     type  =  \"submit\"  >Submit</  PrimaryButton  >\n       </  div  >\n     </  form  >\n   </  template  >  Execute challenge when user submit form         <  script     setup     lang  =  \"ts\"  >\n   import   { useField, useForm }   from     'vee-validate'\n   import     *     as   yup   from     'yup'\n   import   { until }   from     '@vueuse/core'\n   \n   const   {   handleSubmit   }   =     useForm  ({\n     validationSchema: yup.  object  ({\n       name: yup.  string  ().  required  (),\n     }),\n   })\n   \n   const   {   value  :   nameValue  ,   errorMessage  :   nameError   }   =     useField  (  'name'  )\n   \n   const     response     =     ref  ()\n   \n   const     onSubmit     =     handleSubmit  (  async   (  values  )   =>   {\n       await     until  (response).  changed  ()\n     console.  log  ({   ...  values, response: response.value })\n   })\n   </  script  >\n   \n   <  template  >\n     <  form     class  =  \"flex flex-col gap-2\"     @submit  =  \"onSubmit\"  >\n       <  div  >\n         <  input     v-model  =  \"nameValue\"     class  =  \"border border-blue p-1\"     type  =  \"text\"     placeholder  =  \"Your name\"   />\n         <  div     v-if  =  \"nameError\"     class  =  \"text-red\"  >{{ nameError }}</  div  >\n       </  div  >\n       <  div  >\n         <  RecaptchaChallengeV2     v-model  =  \"response\"  >\n           <  PrimaryButton     type  =  \"submit\"  >Submit</  PrimaryButton  >\n         </  RecaptchaChallengeV2  >\n       </  div  >\n     </  form  >\n   </  template  >  .dark .ct-935781{color:#C9D1D9;}\n.ct-935781{color:#24292F;}\n.dark .ct-238295{color:#7EE787;}\n.ct-238295{color:#116329;}\n.dark .ct-998471{color:#79C0FF;}\n.ct-998471{color:#0550AE;}\n.dark .ct-667011{color:#A5D6FF;}\n.ct-667011{color:#0A3069;}\n.dark .ct-942366{color:#FF7B72;}\n.ct-942366{color:#CF222E;}\n.dark .ct-923966{color:#D2A8FF;}\n.ct-923966{color:#8250DF;}\n.dark .ct-443230{color:#FFA657;}\n.ct-443230{color:#953800;}\n.dark .ct-081784{color:#FFA198;font-style:italic;}\n.ct-081784{color:#82071E;font-style:italic;}"}]